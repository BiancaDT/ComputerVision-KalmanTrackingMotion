import numpy as np
import cv2 as cv2
import imutils

lower = (166, 84, 141)
upper = (186, 255, 255)

# Initialize the points
u_x = 0
u_y = 0

camera = cv2.VideoCapture('app_move.mp4')

def predict(x2, P, u, F):
    x2 = np.matmul(F, x2) + u
    P = np.matmul(F, np.matmul(P, F.transpose())) + Rt
    return [x2, P]

def update(x2, P, Z, H, R):
    y = Z - np.matmul(H, x2)
    S = np.matmul(H,np.matmul(P, H.transpose())) + R
    K = np.matmul(P,np.matmul(H.transpose(), np.linalg.pinv(S)))
    x2 = x2 + np.matmul(K, y)
    P = np.matmul((I - np.matmul(K, H)),P)

    return [x2, P]

x1 = np.array(np.mat('0.0; 0.0; 0.0; 0.0'))           # initial state (location and velocity)
P = np.array(np.mat('10000, 0, 0, 0; 0, 10000, 0, 0; 0, 0, 10000, 0; 0, 0, 0, 10000'))    # initial uncertainty
u =  np.array(np.mat('0;0;0;0'))                                # external motion
F =  np.array(np.mat('1, 0, 0.1, 0; 0, 1, 0, 0.1; 0, 0, 1, 0; 0, 0, 0, 1'))          # next state function
H =  np.array(np.mat('1, 0, 0, 0; 0, 1, 0, 0'))                     # measurement function
R =  np.array(np.mat('10000, 0; 0, 10000'))                                    # measurement uncertainty
Rt =  np.array(np.mat('10000,0,0,0;0,10000,0,0;0,0,10000,0;0,0,0,10000'))           # next state uncertainty
I =  np.array(np.mat('1,0,0,0;0,1,0,0;0,0,1,0;0,0,0,1'))

class Point:
    def __init__(self, x=0, y=0):
        self.x = x
        self.y = y

while True:
    _, frame = camera.read()
    blurred = cv2.GaussianBlur(frame, (11, 11), 0)
    hsv = cv2.cvtColor(blurred, cv2.COLOR_BGR2HSV)
    kernel = np.ones((9, 9), np.uint8)
    mask = cv2.inRange(hsv, lower, upper)
    mask = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)
    mask = cv2.morphologyEx(mask, cv2.MORPH_CLOSE, kernel)
    cnts = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL,
                                cv2.CHAIN_APPROX_SIMPLE)[-2]
    center = None
    if len(cnts) > 0:
        c = max(cnts, key=cv2.contourArea)
        ((x, y), radius) = cv2.minEnclosingCircle(c)
        M = cv2.moments(c)
        center = (int(M["m10"] / M["m00"]), int(M["m01"] / M["m00"]))
        if radius > 2:
                cv2.circle(frame, (int(x), int(y)), int(radius), 35, 2, 8)

                p = Point(int(x), int(y))
                u_x = p.x
                u_y = p.y

                x1, P = update(x1, P, np.mat('{}; {}'.format(u_x, u_y)), H, R)
                x1, P = predict(x1, P, u, F)
                predictedCoords=x1
                cv2.circle(frame, (predictedCoords[0], predictedCoords[1]), 20, [0, 255, 255], 2, 8)

        else:
            x1, P = predict(x1, P, u, F)
            predictedCoords = x1
            cv2.circle(frame, (predictedCoords[0], predictedCoords[1]), 20, [0, 255, 255], 2, 8)

    cv2.imshow("Frame", frame)
    #cv2.imshow("Mask", mask)

    if cv2.waitKey(100) == 27:
        break

camera.release()
cv2.destroyAllWindows()
